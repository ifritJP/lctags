# -*- coding:utf-8 -*-
#+AUTHOR: ifritJP
#+STARTUP: nofold
#+OPTIONS: ^:{}

#+TITLE: Lua のトランスコンパイラを考える

ここでは、Lua のトランスコンパイラに必要な要件を挙げる。

* Lua のトランスコンパイラが必要な理由

Lua は軽量で、かつ実行パフォーマンスも高い言語である。
しかし、Lua には次に挙げる欠点がある。
  
- Lua は動的型付け言語であるため、動的型付け言語の欠点が全て当てはまる。
- Lua は C や Java などの言語に比べるとマイナーな言語であり、開発をサポートするツールが少ない。
 
規模の小さいスクリプトを作成している分には問題ないが、
ある程度の規模のスクリプトを開発する場合、
上記問題はインパクトが大きい。

この問題を解決するために Lua のトランスコンパイラが必要となる。

ちなみに、ここで言う Lua のトランスコンパイラとは、
ある言語で書いたスクリプトを Lua のスクリプトへ変換するツールを指す。

** 欠点に対するアプローチ

ここでは、Lua の上記欠点に対するトランスコンパイラを用いたアプローチを示す。

- 動的型付け言語の欠点
  - トランスコンパイラの変換元の言語に静的片付け言語を採用することで、
    動的型付け言語の欠点をカバーすることが出来る。
  - これは typescript と javascript の関係と同様
- 開発をサポートするツールが少ない
  - トランスコンパイラの変換先の言語に Lua だけでなく、
    C 等のメジャーな言語をサポートすることで、
    そのメジャーなサポートツールの利用が可能となる

* トランスコンパイラに必要な要件

上記の欠点をカバーするためのトランスコンパイラに必要な要件を挙げる。

- 変換元の言語として、静的片付け言語を採用する
- 変換先の言語として、 Lua と C 言語をサポートする
  - C への変換は、変換後の C プログラムの実行パフォーマンスを優先しない。
    - luaSocket 等の標準外モジュールを利用したプログラムは、
      C への変換を行なっても、変換後のリンクまではサポートしない。
    - この場合、C 言語を開発をサポートするツールが利用できなくなってしまうが、
      開発をサポートするツールの多くは静的に解析するツールであり、
      リンクまで出来なくても利用出来ることが多い。
    - よって、標準外モジュールの C へのコード変換は非サポートとする。
    - ただし、標準外モジュールのスタブの雛形までは作成する。
      - スタブを作成し、スタブの中身を実装すれば動かせるレベルにする。
  - Lua への変換は、変換後の C プログラムの実行パフォーマンスを優先する。
    - というか、変換元の言語ほぼそのまま Lua に落せるような Syntax にする
- Lua で実行可能なスクリプトとして開発する
- 変換元の言語で書かれたスクリプトを読み込み、そのまま実行可能とする
  - 実行時に Lua ファイルと中間ファイルを生成し、次に実行する際は変換済みファイルを利用する
  - 中間ファイルには、元のファイルに定義されている型やメソッドなどのメタ情報を含める

** 変換元の言語の要件

変換元の言語の要件を挙げる
   
- 変換先の言語に C 言語をサポートするため、
  メモリ管理として gc を前提にしない。
  - とはいえ、alloc/free を明示するのは使い勝手が悪過ぎるので、
    Rust の所有権方式を参考にする
- 学習コストを下げるため、Syntax は C 言語/LUa を基調とする。
- コルーチンや anonymous 関数、クロージャ等、 Lua が採用している機能をなるべく採用する。
  - ただし、 metatable の概念は Lua の独自色が強過ぎするので採用しない。
- 言語レベルでオブジェクト思考プログラミングをサポートする
- Lua がサポートしない機能は、採用しない。
  - Lua はオブジェクト思考プログラミングをサポートしている訳ではないが、
    metatable を利用することで実現可能である。
  - metatable を利用することで、さまざまなことが実現可能だが、
    metatable のトリッキーな使い方はサポートしない。
  - メジャーな言語で利用可能なものを採用し、実現方法として metatable を利用する。
- 値は符整付き号数(int)と浮動小数(float)をサポートする。
  - ビット幅の違いや、符号の有無はサポートしない。
- Lua スクリプトで書かれたモジュールは、 Glue 無しでそのまま利用可能とする。
- Lua の標準関数を全て利用可能とする。
  - ただし、関数名は完全一致しなくても良い。
- 少なくとも lctags を開発出来るレベルにはする。
- 記載したコメントは、変換前の位置に該当する変換後の位置にそのまま挿入する。
