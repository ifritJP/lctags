# -*- coding:utf-8 -*-
#+STARTUP: nofold

* libclanglua

lua から libclang をアクセスするためのパッケージ

** ビルド方法

*** 必要なライブラリ等
sudo apt-get install swig
sudo apt-get install libreadline-dev
sudo apt-get install lua5.3
sudo apt-get install lua5.3-dev
sudo apt-get install libclang-dev

luasqlite3 (ver 0.9.4)

*** libclang を時前でビルドする場合

Get the required tools.

    See Getting Started with the LLVM System - Requirements.
    Note also that Python is needed for running the test suite. Get it at: http://www.python.org/download
    Standard build process uses CMake. Get it at: http://www.cmake.org/download

Check out LLVM:

    Change directory to where you want the llvm directory placed.
    svn co https://llvm.org/svn/llvm-project/llvm/tags/RELEASE_390/final llvm

Check out Clang:

    cd llvm/tools
    svn co https://llvm.org/svn/llvm-project/cfe/tags/RELEASE_390/final clang
    cd ../..

Build LLVM and Clang:

    mkdir build (in-tree build is not supported)
    cd build
    cmake -G "Unix Makefiles" ../llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    make
    This builds both LLVM and Clang for debug mode.
    Note: For subsequent Clang development, you can just run make clang.
    CMake allows you to generate project files for several IDEs: Xcode, Eclipse CDT4, CodeBlocks, Qt-Creator (use the CodeBlocks generator), KDevelop3. For more details see Building LLVM with CMake page.

*** sqlite3
lsqlite3_fsl09x

*** lua
lua-5.3.4    

** ビルドの処理フロー

+ swig を使用して libclang.h の glue を作成する
+ mkwrap.lua で使用して、swig が出力した glue をラッピングするライブラリを作成する
  + このとき、 mkwrap.lua は glue を使用して libclang にアクセスしている
  + mkwrap.lua は index.h のからラッピングするライブラリを作成するが、
    ライブラリは _base.lua を元にして作成する。
  + _base.lua 内に libclang と同名の関数が定義してある場合は、
    libclang の glue を直接コールせずに、_base.lua の関数を呼ぶ
    + clang_visitChildren() がその処理対象

   

* stackcalc

使用 stack の見積もりツール

** 対応するメソッドコール、関数ポインタコール

- 引数に指定されているものを使用するケース
void func( func_t * pFunc ) {
  pFunc();
}

※ この場合、コールパスが分かれば callee が確定する。
※ コールパスが分からなくても、 その関数の型が分かれば候補を絞ることは出来る

- 引数に指定されているものを使用するケース
void func( info_t * pInfo ) {
  pInfo->pFunc();
}

※ この場合、コールパスが分かれば callee が確定する。
※ コールパスが分からなくても、次の方法で候補を絞ることができる
※   その関数の型 (typedef)。
※   info_t::pFunc に設定している関数ポインタ


- 大域変数に保持されているものを使用するケース
void func() {
  s_pFunc();
}

※ この場合、大域変数にセットする値が分かれば callee が確定する
※ コールパスが分からなくても、 その関数の型が分かれば候補を絞ることは出来る

- 関数戻り値を使用するケース
void func() {
  sub()->pFunc();
}

※ この場合、関数の戻り値が分かれば callee が確定する


* lctags

libclang を利用した index 作成ツール

** 機能

- シンボル定義場所の特定
  - シンボルの種類
    - 関数定義
    - クラス定義
    - enum, enum item
    - 大域変数(関数型変数も含む)
    - typedef
    - struct
    - メンバー定義
    - define
- シンボル参照場所の特定
- シンボルのコメント表示
- 対象ファイル一覧の表示
- include ファイル参照場所の特定

** 必要な情報
- シンボル名(完全限定名 → KEY、単純名)
- シンボルの種類
- 位置情報(ファイル名、行番号, 列)
- 完全限定名
  - namespace + シンボル名 + ファイルID
- シンボルのコメント
- 参照位置(ファイル名、行番号, 列)
  
** テーブル

- 単純名テーブル
| ID(KEY) | 単純名 |
|---------+--------|
|         |        |
   

- 名前空間テーブル
| ID(KEY) | 親名前空間 ID | 単純名ID | digest | フル名 | 別名 |
|---------+---------------+----------+--------+--------+------|
|         |               |          |        |        |      |

シンボルは、フル名 = 名前 :: ファイル ID とする。

例: hoge.h に void func( void ) が宣言されている場合

::func::1   ここで 1 は hoge.h のファイル ID

別名とは、typedef で定義されている名前。
ただし、 anonymous の enum, struct, union の場合のみ typedef の名前が入る。


digestは、主に enum, struct, union 等のメンバを持つ名前空間が
更新されているかどうかを確認するために使用する。
これを調べ、更新されていない場合は登録処理を skip し、登録処理を高速化する。


- ファイルパステーブル
| ID(KEY) | includeフラグ | 更新時間 | ファイルパス | 更新中 | コンパイルオプション |
|---------+---------------+----------+--------------+--------+----------------------|
|         |               |          |              | ※     | ※                   |
|         |               |          |              |        |                      |

※ 更新中は、そのファイルの TAG 更新中であることを示す。
※ コンパイルオプションは、そのファイルをコンパイルする際に使用したオプションを示す。
   include ファイルには付かない

- シンボル定義テーブル
| 名前空間ID | 親名前空間ID | 単純名 ID | シンボルの種類 ID | ファイル ID | 行 | コメント |
|------------+--------------+-----------+-------------------+-------------+----+----------|
|            |              |           |                   |             |    |          |

- シンボル参照テーブル
| 名前空間ID | 単純名 ID | ファイル ID | 行 | ROW | 参照箇所が所属する名前空間 ID |
|------------+-----------+-------------+----+-----+-------------------------------|
|            |           |             |    |     |                               |

- include ファイル参照テーブル

| include の ファイル ID | ファイル ID | 行 | ROW |
|------------------------+-------------+----+-----|
|                        |             |    |     |

- include ファイルが所蔵する名前空間テーブル

| include ファイル ID | include 元のファイル ID | inc箇所が所属する名前空間 ID |
|---------------------+-------------------------+------------------------------|
|                     |                         |                              |

所属する名前空間が root の場合は記録しない
